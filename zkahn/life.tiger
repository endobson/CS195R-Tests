let type aint = array of int
	type aint2 = array of aint
	var x := aint[10] of 0
	var cur := aint2[10] of x 
	var next := aint2[10] of x 
	var temp := aint2[10] of x
	var height := 10
	var width := 10
	
	function isAlive(grid:aint2, x1:int, y1:int):int = 
		if x1 >= 0 & x1 < width & y1 >= 0 & y1 < height & grid[x1][y1]=1 then 1 else 0 
	function numAliveNeighs(grid:aint2, x1:int, y1:int):int = 
		let var toReturn := 0 in 
		for i:= -1 to 1 do
			for j:= -1 to 1 do
				toReturn := toReturn + isAlive(grid, x1 + i, y1 + j);
		toReturn end
	function willLive(grid:aint2, x1:int, y1:int):int = 
		let var neighs := numAliveNeighs(grid,x1,y1) in
		if neighs = 3 then 1 
			else if neighs = 4 & grid[x1][y1]=1 
				then 1 
			else 0 end
	function nextGen(cur:aint2, next:aint2) = 
		for i:= 0 to width do
			for j:= 0 to height do
				next[i][j] := willLive(cur, i, j)
	function printgrid(grid:aint2) = 
		(for i :=0 to width do 
			(for j := 0 to height do
				print(itoa(isAlive(grid,i,j))); 
			print("\n"));
		print ("\n"))
	in
	for i :=0 to width do 
		(cur[i] := aint[10] of 0;
		for j := 0 to height do
			cur[i][j] := 0);
	for i :=0 to width do 
		(next[i] := aint[10] of 0;
		for j := 0 to height do
			next[i][j] := 0);
	cur[2][2] := 1;
	cur[2][3] := 1;
	cur[2][4] := 1;
	cur[1][4] := 1;
	cur[0][3] := 1;
	for i:= 1 to 10 do (
		printgrid(cur);
		nextGen(cur, next);
		temp := next;
		next := cur;
		cur := temp
		)
end